1. Работа с системой контроля версий Git начинается с понимания её базовой структуры. Вся работа ведется в трёх основных областях: рабочая папка, индекс и репозиторий. Рабочая папка — это те файлы и папки, с которыми вы непосредственно работаете на своём компьютере. Здесь вы вносите все изменения в код. Индекс, или область подготовленных файлов, — это промежуточная область, куда вы добавляете файлы, чтобы сообщить Git, какие именно изменения вы хотите сохранить в следующем коммите. Это позволяет вам тщательно отбирать изменения, а не коммитить всё подряд. Репозиторий — это база данных Git, расположенная в скрытой папке .git, где хранится вся история проекта, все коммиты и метаданные. Это сердце Git.

2. Ключевые команды для перемещения изменений между этими областями — git add, git commit и git push. Команда git add переносит изменения из рабочей папки в индекс. Она подготавливает файлы к сохранению. Команда git commit создает новый снимок состояния проиндексированных файлов и навсегда сохраняет его в локальном репозитории. Каждому коммиту присваивается уникальный хэш. Команда git push отправляет все новые коммиты из вашего локального репозитория в удалённый репозиторий, чтобы поделиться своей работой с другими.

3. Написание информативных сообщений к коммитам — это критически важная практика. Сообщения вроде "исправление" или "update" не несут никакой смысловой нагрузки. Хорошее сообщение отвечает на вопрос: "Что было изменено и почему?". Это позволяет вам и вашей команде быстро понять историю проекта, найти, когда была внесена та или иная функция или исправление, и легко откатиться к нужной версии без необходимости изучать каждое изменение в коде.

4. При добавлении файлов в индекс у вас есть два основных варианта: git add имя_файла и git add .. Первая команда добавляет конкретный файл, что полезно, когда вы хотите разбить свои изменения на несколько логических коммитов и тщательно контролируете, что именно попадает в каждый из них. Команда git add . добавляет все новые и изменённые файлы из текущей директории и всех вложенных папок. Её лучше использовать, когда все ваши изменения в рабочей папке логически связаны и предназначены для одного коммита.

5. Чтобы понять текущее состояние ваших трёх областей, используется команда git status. Её вывод динамически меняется. Вначале она покажет неотслеживаемые и изменённые файлы как "не подготовленные к коммиту". После выполнения git add эти файлы перейдут в раздел "изменения, готовые к коммиту". После коммита git status сообщит, что "нечего коммитить, рабочая папка чиста". Если у вас есть неотслеживаемые файлы, она также будет показывать их.

6. Для связи локального репозитория с удалённым используется команда git remote add origin URL. Она добавляет удалённый репозиторий с псевдонимом origin. Слово "origin" — это стандартное, общепринятое имя для указания на основной удалённый репозиторий, своего рода ярлык для длинного URL-адреса.

7. При первой отправке изменений в новую ветку используется команда git push -u origin main. Флаг -u не только выполняет отправку, но и устанавливает связь между вашей локальной веткой main и удалённой веткой origin/main. После этого в будущем вы можете использовать просто git push или git pull, и Git будет автоматически знать, с какой удалённой веткой работать.

8. Ветка по умолчанию — это главная ветка в репозитории, в которую обычно вливаются все завершённые функции. Исторически она называлась master, но в последние годы экосистема перешла на использование имени main по соображениям инклюзивности. То, какое имя у вас создалось, зависит от версии Git и настроек. Это важно, потому что многие команды, такие как git clone, по умолчанию работают с этой веткой.

9. Для просмотра истории коммитов используется команда git log. Она показывает список коммитов в обратном хронологическом порядке. Для каждого коммита вы видите его уникальный хэш, автора, дату и сообщение коммита. Это мощный инструмент для аудита изменений и понимания эволюции кодовой базы.

10. Если вы внесли изменения в файл, но не выполнили git add перед git commit, коммит не будет создан. Git проигнорирует эти неподготовленные изменения, так как коммит сохраняет только то, что было предварительно добавлено в индекс. Команда git status прямо перед коммитом покажет эти изменения как "не проиндексированные для коммита", что служит напоминанием о необходимости их добавить.
